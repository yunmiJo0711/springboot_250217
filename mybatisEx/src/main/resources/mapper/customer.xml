<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
   <!-- namespace 속성의 값이 매우 중요합니다.
   dao 역할을 할 인터페이스를 만들어서 SQL 동작을 합니다.
   아래와 같이 인터페이스의 패키지.파일명을 namespace 속성값으로 설정합니다.
   	 -->
<mapper namespace="org.iclass.mybatisEx.mapper.CustomerMapper"> <!-- 식별자를 작명해야 합니다. -->
	<select id="selectByPk" parameterType="String" resultType="Customer"><!-- parameterType : 입력, resultType : 출력 -->
		select * from tbl_customer
		where custom_id = #{customId}
	</select>

	<!-- 리턴타입이 List 일때에는 제너틱타입만 설정하면 됩니다. --><!-- 매개변수(where 조건식)가 없어서 parameterType 이 없다. -->
	<select id="selectAll" resultType="Customer">
		select * from tbl_customer order by custom_id
	</select>
	
	<!--  insert, update, delete 는 리턴타입 지정안합니다.(그래도 값은 리턴해 줍니다.) -->
	<insert id="insert" parameterType="Customer">
		insert into tbl_customer(custom_id, name, email, age, reg_date) 
        values (#{customId}, #{name}, #{email}, #{age}, sysdate)
	</insert>
	
	<update id="update" parameterType="Customer">
		update tbl_customer 
		set email = #{email}, age = #{age} 
		where custom_id = #{customId}
	</update>
	
	<delete id="delete" parameterType="String">
		delete from tbl_customer 
		where custom_id = #{customId}
	</delete>


</mapper>  